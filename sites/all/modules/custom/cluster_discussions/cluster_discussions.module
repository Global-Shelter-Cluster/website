<?php
/**
 * @file
 * Code for the cluster_discussions feature.
 */

include_once 'cluster_discussions.features.inc';
include_once 'cluster_discussions.pathauto.inc';

const CLUSTER_DISCUSSIONS_PER_PAGE = 5;

/**
 *  Implements hook_menu().
 */
function cluster_discussions_menu() {
  $items['node/%/discussions'] = array(
    'title' => 'Discussions',
    'title callback' => '_cluster_discussions_title_callback',
    'title arguments' => array(1),
    'page callback' => 'cluster_discussions_all',
    'page arguments' => array(1),
    'access callback' => 'og_is_group',
    'access arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu title callback.
 */
function _cluster_discussions_title_callback($nid) {
  global $language;
  $title = t('Documents');
  if (! is_numeric($nid)) {
    return $title;
  }

  try {
    // @TODO manage multilinigual loading of entities.
    $wrapper = entity_metadata_wrapper('node', node_load($nid), array('langcode' => LANGUAGE_NONE));
    return $wrapper->label();
  }
  catch (EntityMetadataWrapperException $exc) {
    watchdog(
      'cluster_docs',
      'See '  . __FUNCTION__ . '() ' .  $exc->getTraceAsString(),
       NULL,
       WATCHDOG_ERROR
    );
  }
  return $title;
}

/**
 * Page callback, shows a group's discussions using Search API.
 * @param $nid
 * @return Render array
 */
function cluster_discussions_all($nid) {
  global $language;
  $query = search_api_query('default_node_index', array(
    'languages' => array($language->language),
  ));

  $filter = $query->createFilter();
  $filter->condition('og_group_ref', $nid);
  $filter->condition('type', 'discussion');
  $query->filter($filter);

  $query->sort('changed', 'DESC');

  $offset = pager_find_page() * CLUSTER_DISCUSSIONS_PER_PAGE;
  $query->range($offset, CLUSTER_DISCUSSIONS_PER_PAGE);

  $result = $query->execute();
  pager_default_initialize($result['result count'], CLUSTER_DISCUSSIONS_PER_PAGE);
  if (! $result['results']) {
    $content = array(
      '#markup' => t('No content for the moment.'),
    );
  }
  else {
    $content = node_view_multiple(node_load_multiple(array_keys($result['results'])));
  }
  $ret['content'] = $content;
  $ret['pager'] = array(
    '#theme' => 'pager',
  );

  return $ret;
}

/**
 * Implements hook_theme().
 */
function cluster_discussions_theme() {
  return array(
    'cluster_discussions_all' => array(
      'file' => 'theme/cluster_discussions.theme.inc',
      'render element' => 'element',
    ),
    'cluster_discussions_teaser' => array(
      'file' => 'theme/cluster_discussions.theme.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_node_view_alter().
 */
function cluster_discussions_node_view_alter(&$build) {
  if ($build['#node']->type != 'discussion') {
    return;
  }
  switch ($build['#view_mode']) {
    case 'teaser':
      $build['#theme'] = 'cluster_discussions_teaser';
      if (!$build['#node']->comment_count) {
        $build['#replies'] = t('no replies');
      }
      else {
        $build['#replies'] = format_plural($build['#node']->comment_count, '1 reply', '@count replies');
      }

      $build['#is_latest'] = FALSE;
      $gid = _cluster_discussion_associated_group($build['#node']->nid);
      if ($gid) {
        $build['#is_latest'] = $build['#node']->nid == _cluster_discussion_get_latest($gid);
      }

      // Author
      $user = user_load($build['#node']->uid);
      $build['#author'] = array(
        'name' => $user->name,
        'path' => 'user/'.$user->uid,
      );
      break;
    default:
      // Do nothing.
  }
}

/**
 * Gets the associated group ID for the given discussion node ID, if any.
 * @param $nid
 * @return int|NULL
 */
function _cluster_discussion_associated_group($nid) {
  return db_select('og_membership', 'g')
    ->fields('g', array('gid'))
    ->condition('g.entity_type', 'node')
    ->condition('g.group_type', 'node')
    ->condition('g.etid', $nid)
    ->execute()->fetchField();
}

/**
 * Get the latest discussion nid for the given group, if any.
 * @param $gid
 * @return int|NULL
 */
function _cluster_discussion_get_latest($gid) {
  if (!og_is_group('node', node_load($gid))) {
    return;
  }

  $query = db_select('og_membership', 'g');

  $query->fields('g', array('etid'));

  $query->join('node', 'n', 'n.nid = g.etid');
  $query->condition('g.entity_type', 'node');

  $query->condition('g.group_type', 'node');
  $query->condition('g.gid', $gid);

  $query->condition('n.type', 'discussion');
  $query->condition('n.status', NODE_PUBLISHED);

  $query->orderBy('g.created', 'DESC');
  $query->range(0, 1);

  return $query->execute()->fetchField();
}

/**
 * Implements hook_comment_insert().
 * Save the node to make its "changed" value update, so that we're able to sort
 * by "last activity".
 */
function cluster_discussions_comment_insert($comment) {
  $node = node_load($comment->nid);
  node_save($node);
}