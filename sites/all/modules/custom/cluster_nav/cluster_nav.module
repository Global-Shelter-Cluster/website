<?php
/**
 * @file
 * Handles all functionality related to navigation, such as main navigation elements, dashboard navigation,
 * contextual navigation and local tasks for nodes.
 */

/**
 * Implements hook_menu().
 */
function cluster_nav_menu() {
  $items = array(
    'current-operations' => array(
      'menu_name' => 'main-menu',
      'title' => 'Current operations',
      'page callback' => '_cluster_nav_paged_teaser_list',
      'page arguments' => array('response'),
      'access arguments' => array('access content'),
    ),
    'regions-countries' => array(
      'menu_name' => 'main-menu',
      'title' => 'Regions / Countries',
      'page callback' => '_cluster_nav_paged_teaser_list',
      'page arguments' => array('geographic_region'),
      'access arguments' => array('access content'),
    ),
    'communities-of-practice' => array(
      'menu_name' => 'main-menu',
      'title' => 'Communities of practice',
      'page callback' => '_cluster_nav_paged_teaser_list',
      'page arguments' => array('community_of_practice'),
      'access arguments' => array('access content'),
    ),
  );

  return $items;
}

/**
 * Page callback for main menu items.
 * @param $bundle
 *  An node entity bundle name.
 * @return
 *  Paged node teaser render array.
 */
function _cluster_nav_paged_teaser_list($bundle) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED);
  if ($bundle == 'response') {
    $query->fieldCondition('field_response_status', 'value', 'active');
  }
  $results = $query->pager(50)
    ->execute();
  if (! isset($results['node'])) {
    $content = array(
      '#markup' => t('No content for the moment.'),
    );
  }
  else {
    $content = node_view_multiple(node_load_multiple(array_keys($results['node'])));
  }
  return array(
    '#prefix' => '<ul class="current-operations-list">',
    'content' => $content,
    '#suffix' => '</ul>',
    'pager' => array(
      '#markup' => theme('pager'),
      '#weight' => 10
    )
  );
}

/**
 * Implements hook_preprocess_page().
 *
 * Add contextual navigation.
 * Certain nav elements are printed at the node temaplate level on group node pages, and at the page
 * template level at other times.  Add the nav elements at page level when required.
 */
function cluster_nav_preprocess_page(&$variables) {
  // Add local tasks to page template for user/%
  $variables['local_tasks'] = FALSE;
  if (arg(0) == 'user') {
    $local_tasks = menu_local_tasks();
    $variables['local_tasks'] = $local_tasks['tabs']['output'];
  }

  // Add the main menu to every page.
  $variables['main_nav'] = menu_tree_output(menu_tree_all_data('main-menu'));

  // Provide dashboard and contextual navigation at page level.
  $display_provider = FALSE;
  $page_level_nav = FALSE;
  $variables['dashboard_menu'] = FALSE;
  $variables['contextual_navigation'] = FALSE;
  $variables['editor_menu'] = FALSE;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
  }
  else {
    return;
  }

  // If viewing a group node page, use it.
  if (og_is_group('node', $node)) {
    $display_provider = GroupDisplayProvider::getDisplayProvider($node);
  }

  // If viewing a group content node page, get the associated group node's navigation elements.
  // @TODO Properly handle the fact that the group reference is a multivalue field.
  elseif (isset($node->og_group_ref)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $group = $wrapper->og_group_ref->value();
    if (count($group) > 0) {
      // Set a flag to indicate we want to include the group nav items at the page level.
      $page_level_nav = TRUE;
      $display_provider = GroupDisplayProvider::getDisplayProvider($group[0]);
      // Override the page level title to show the group content title.
      $variables['title'] = $variables['page_title'] = $wrapper->og_group_ref->label();
    }
  }

  // Add the page level elements.
  if ($display_provider) {
    // Add the dashboard menu to the page template for group pages other than the dashboard.
    if (arg(2) || $page_level_nav) {
      $variables['dashboard_menu'] = $display_provider->getDashboardMenu();
      $variables['editor_menu'] = $display_provider->getEditorMenu();
    }
    $variables['contextual_navigation'] = $display_provider->getContextualNavigation();
  }
}

/**
 * Implements hook_node_view().
 */
function cluster_nav_node_view($node, $view_mode) {
  $node->content['local_tasks'] = FALSE;
  if ($view_mode == 'full' && og_is_group('node', $node) && og_user_access('node', $node->nid, 'administer group')) {
    $local_tasks = menu_local_tasks();
    $node->content['local_tasks'] = array(
      '#prefix' => '<ul class="editor-menu">',
      '#suffix' => '</ul>',
      'items' => $local_tasks['tabs']['output'],
    );
  }
}

/**
 *  Implements hook_theme().
 */
function cluster_nav_theme($existing, $type, $theme, $path) {
  module_load_include('inc', 'cluster_nav', 'theme/cluster_nav.theme');
  return _cluster_nav_theme($existing, $type, $theme, $path);
}
